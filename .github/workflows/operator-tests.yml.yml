name: Operator Tests

on:
  pull_request:
    branches:
      - main
      - development
      - hotfix
    paths:
      - 'operators/**'
      - '.github/workflows/operator-tests.yml'

jobs:
  test-operators:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Print uv version and cache dir
        run: |
          uv --version
          uv cache dir
          which python

      - name: Create and activate virtual environment and install Feluda
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install .
          uv pip install ".[dev]"

      - name: Detect changed operators and run tests
        run: |
          # Get the base branch (target branch of the PR)
          BASE_BRANCH=${{ github.base_ref }}
          echo "Base branch: $BASE_BRANCH"

          # Find changed files in operators directory
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD operators/)
          echo "Changed files:"
          echo "$CHANGED_FILES" | sed 's/^/  /'  # This indents each file for better readability

          # If no files changed, print a message
          if [ -z "$CHANGED_FILES" ]; then
            echo "No files were changed in the operators directory"
          fi

          # Print current working directory for context
          echo "Current working directory: $(pwd)"

          # Initialize a variable to track if we found any operators to test
          FOUND_TESTS=false

          # Loop through each operator directory and check if it contains changes
          for OPERATOR_DIR in operators/*/; do
            echo "Checking operator directory: $OPERATOR_DIR"
            if echo "$CHANGED_FILES" | grep -q "$(basename $OPERATOR_DIR)"; then
              echo "✓ Changes detected in operator: $(basename $OPERATOR_DIR)"

              # # Check if test.py exists in this operator directory
              # if [ -f "${OPERATOR_DIR}test.py" ]; then
              #   echo "✓ Found test.py in: ${OPERATOR_DIR}"
              #   echo "→ Running tests for: $(basename $OPERATOR_DIR)"
              #   echo "→ Changing to directory: ${OPERATOR_DIR}"
              #   source .venv/bin/activate
              #   cd "$OPERATOR_DIR"
              #   echo "→ Current directory before running tests: $(pwd)"
              #   python test.py
              #   TEST_EXIT_CODE=$?
              #   echo "→ Test exit code: $TEST_EXIT_CODE"
              #   cd - > /dev/null
              #   echo "→ Changed back to: $(pwd)"
              #   FOUND_TESTS=true
              # else
              #   echo "✗ No test.py found in: ${OPERATOR_DIR}"
              # fi
            else
              echo "✗ No changes detected in: $(basename $OPERATOR_DIR)"
            fi
          done

          # # Final status report
          # echo "----------------------------------------"
          # echo "Final Status Report:"
          # if [ "$FOUND_TESTS" = false ]; then
          #   echo "✗ No test.py files were found in changed operator directories"
          # else
          #   echo "✓ Tests were executed for changed operators"
          # fi
          # echo "----------------------------------------"

      # This ensures cleanup runs even if previous steps fail
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up uv cache and virtual environment..."
          uv cache dir
          uv cache prune
          uv cache clean
          rm -rf .venv/

      # - name: Get modified files
      #   id: changed-files
      #   uses: tj-actions/changed-files@v40
      #   with:
      #     files: |
      #       feluda/operators/**/*.py
      #       feluda/operators/**/pyproject.toml

      # - name: Install base dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -e .
      #     pip install pytest

      # - name: Run tests for modified operators
      #   if: steps.changed-files.outputs.any_changed == 'true'
      #   run: |
      #     echo "Modified files:"
      #     for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
      #       echo "$file"
      #       if [[ $file == feluda/operators/* ]]; then
      #         operator_name=$(basename "$file" .py)
      #         operator_folder=$(dirname "$file")

      #         # Install operator-specific dependencies if pyproject.toml exists
      #         if [ -f "$operator_folder/pyproject.toml" ]; then
      #           echo "Installing dependencies for $operator_name"
      #           pip install -r "$operator_folder/pyproject.toml"
      #         fi

      #         # Run tests if they exist
      #         test_path="tests/operators/test_${operator_name}.py"
      #         if [ -f "$test_path" ]; then
      #           echo "Running tests for $operator_name"
      #           python -m pytest "$test_path" -v
      #         fi
      #       fi
      #     done

      # - name: Cleanup
      #   if: always()
      #   run: |
      #     # Clean up model caches
      #     rm -rf ~/.cache/torch/hub
      #     rm -rf ~/.cache/huggingface/hub

      #     # Clean up pip and Python caches
      #     rm -rf ~/.cache/pip
      #     rm -rf /tmp/feluda*
      #     find . -type d -name "__pycache__" -exec rm -r {} +
